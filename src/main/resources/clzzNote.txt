============= day_01 ===========
知识回顾
	Spring
		ioc、aop（oop）、事务、mvc
准备工作
	环境
		java：jdk8
		ied：idea
		maven：3.x
		mysql：5.x
		代码管理：git（github、码云）
	常用软件：
		浏览器：firefox、chrome
		文本编译器：noted++
		测试工具：postman
	常用的网址
		maven：https://mvnrepository.com
		码云: https://gitee.com/

Spring Boot 基础介绍
	spring boot 不是一个新的框架，基于spring 4.0，就像maven 一样，它整合了大量主流的第三方框架，形成的一套“快速开发的框架”；
	特性
		快速开发；
		pom，以 starter 形式，按照组类聚了多个jar，形成单条依赖，以父子继承的方式，实现 jar 版本的控制；
		“习惯优于配置”，简化了配置，没有web.xml
		注解开发
		内嵌式的servlet容器，无需外置容器
		监控的方便性
	why？
		配置、编码、部署变得简单
	mvc、boot、cloud
		mvc：spring web框架，
		boot：集成了 mvc、垂直的框架大集成者；
		cloud：分布式应用的大集成者，三维立体的，每一个应用基于 boot；

常用的注解
	spring
		@SpringBootApplication：启动boot 项目
		@Configuration：配置类注解 ---- <beans></beans>；
		@Bean：注册 bean 注解 ---- <bean></bean>；
		@PropertySource ---- 绑定配置文件；
		@ConfigurationProperties ---- 设置配置类属性
		@Value：读取配置文件 || 读取配置文件属性；
		@Component：注册 spring 组件；
		@Autowired ---- 按照 bean 的类型组装 Bean
		@Resource ---- 按照 Bean 的名字组装 Bean；
		@Aspect（@Bedore、@Aroud、@After、@PointCut、@Oder） ----- Aop 注解
		@Transational ---- 事务注解
		@Controller（RestControler） ----- 控制层注解
			@RequestMapping、@GetMapping、@PostMapping、@PutMapping、@DeleteMapping || consumes（进入控制器的数据类型）、produces（控制器输出的数据类型）
				application/json
				application/x-www-form-urlencoded
			@PathVariable ---- 接受路径参数
			@RequestParam ---- 接受查询参数
			@RequestBody ---- 接受json参数
			@ModelAttribute ---- 接受form表单数据
			
		@Service ----- 服务层注解
		@Repository ---- 持久层注解
	---------------------------
	mybatis
		@Mapper ---- @MapperScan + @Repository
		@Select、@Insert、@Update、@Delete
		@Results
	---------------------------
	jpa
		@Entity ---- 指明实体 bean
		@Table ---- 映射到数据库中的表
		@Id ---- 对应表中 primary key
		@GeneratedValue ---- strategy = GenerationType.IDENTITY -----主键生成策略
		@Column ---- 映射到表中的列
		@Transient ---- 实体 bean 的属性不参与到数据库的映射
		@OneToOne
			OneToOne：一对一关系中，一方使用 JoinColumn 注解（有外键），另一方使用 mappedBy 属性（可选）
			cascade：联级操作
			fetch：加载数据策略
			JsonIgnore：不序列化该字段，避免无限递归
		@OneToMany
			OneToMany：多方使用 joinClumn，创建外键，一方使用 mappedBy 属性
		@ManyToOne
			@JoinColumn
				insertable、updatable：标识该属性是否参与插入和更新插入
		@ManyToMany
			@JoinTable ---- 中间表
		@Query
搭建 Spring Boot 框架
	folder、source folder、resource folder、package 四者的区别
	规范性：结构清晰、缩进清晰、命名清晰、逻辑清晰
	
配置文件
	种类：
		bootstrap.property(yml) ---- 父上下文配置
		application.property（yml） ---- 全局配置文件
		其他配置文件：log
	优先级
		相同位置，property > yml
		不同的位置
			外置 /config/application.property(yml)
			外置 /application.property(yml)
			内置 /config/application.property(yml)
			内置 /application.property(yml)
	读取
		全局配置文件： @Value 读取配置文件中的值
		
logback 日志系统
	步骤一：pom导入相关 jar ---- 已经引入，无需手动添加
	步骤二：配置
		特有配置文件 ---- logback-dev.xml
		全局配置文件
			# for log
			logging.config=classpath:config/logback-dev.xml
		配置类
	步骤三：应用
		
	
作业
	创建一个 spring boot 项目，提交到远程代码仓库。 ----- 各位远程代码仓库的地址
	完成配置文件读取，以接口的方式运行出来
	加入logback日志系统
	思考题：如何将 spring boot 项目打包成 war，部署到外置 tomcat 项目，并运行成功
	
============= day_02 ===========
多环境的配置
	三个环境：dev（for 开发人员）、staging（for 测试人员）、live（生产环境）
	application-{profile}.properties ---- {profile}：环境占位符
		全局配置：apllication.properties
		dev环境配置：apllication-dev.properties
		live环境配置：apllication-live.properties
		
	步骤一：pom引入 jar ---- spring 自带功能，无需引入
	步骤二：配置
		新建dev、live 环境的 log 配置，修改日志级别；
		新建spring dev、live的配置文件，分别指向不同的log配置文件；
		全局配置中引入环境配置：spring.profiles.active=dev
	步骤三：应用
		修改全局配置中环境设置，调用log接口，查看日志输出是否正确
		
热部署配置
	步骤一：导入jar
		<!-- spring dev tools -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
	步骤二：配置
		application.properties
			# for dev tools
			spring.devtools.restart.enabled=true
			spring.devtools.restart.additional-paths=src/main/java
	步骤三：应用
		修改java代码，查看是否热部署成功
		
http & https 配置
	http: 超文本传输协议，默认端口 80，数据不安全；
	https：安全的超文本传输协议，默认端口 443，数据是安全的 ssl证书；
	SSL ---- CA 颁发证书
		域名型的：信任级别比较低的；
		企业级别的：信任级别中等；
		增强型证书：信任级别最高
		------------------
		获取证书的途径
			网上购买
			手动生成：keytool -genkey -alias tomcat -keyalg RSA
	步骤一：pom引入jar ---- 无需引入；
	步骤二：配置
		application.properties
			# for ssl
			server.ssl.key-store=classpath:.keystore
			server.ssl.key-store-password=111111
		配置类
			
	步骤三：应用
		直接访问 http https
		
Mybatis
	步骤一：引入jar
		数据库、连接池、mybatis、分页插件
		<!-- mybatis -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.1.0</version>
        </dependency>
        <!-- pageHelper -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.2.12</version>
        </dependency>
	步骤二：配置
		application.xml
			# for data source
			# mysql 5
			spring.datasource.driver-class-name=com.mysql.jdbc.Driver
			# mysql 6 +
			#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
			spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2B8
			spring.datasource.username=root
			spring.datasource.password=root

			# hikari pool
			spring.datasource.hikari.maximum-pool-size=20
			spring.datasource.hikari.minimum-idle=5
			spring.datasource.hikari.idle-timeout=180000
			spring.datasource.hikari.auto-commit=true

			# for mybatis
			mybatis.configuration.map-underscore-to-camel-case=true
			#mybatis.type-aliases-package=com.hqyj.SpringBootDemo.modules.*.entity
			#mybatis.mapper-locations=classpath:mapper/*Mapper.xml
		步骤三：应用
			创建 表、entity
			“控制器”拆分的思想
				模块控制器：页面的跳转；
				entity控制器：数据的处理，形成接口；
			书写流程：dao --- service ---- controller
			组合查询，通过设置results结果集，将关联id做两次映射，相当于调用两个接口并组合结果集
			分页查询：使用 pageHelp 插件进行分页
			
RESTful规则
	书写规则
		URI结尾不应包含（/）；
		正斜杠分隔符（/）必须用来指示层级关系；
		应使用连字符（ - ）来提高URI的可读性；
		不得在URI中使用下划线（_）；
		URI路径中全都使用小写字母；
	命名规则
		单资源 ---- URL中不要Get、Update等字样，通过请求类型控制
			GET /api/user；
			POST /api/user；
		单资源带id
			GET /api/user/1；
			POST /api/user/1；
			POST /order/{id}/name ---- 重命名；
			POST /order/{id}/status ---- 修改状态；
		复数资源：GET /api/users；
		复数资源查找
			GET /api/users/search?name=123；
			GET /api/users/searchByName?name=123；
		嵌套资源
			GET /api/teams ---- 团队列表；
			GET /api/teams/123 ---- ID 为 123 的团队；
			GET /api/teams/123/members ---- ID 为 123 的团队下的成员列表；
			GET /api/teams/123/members/456 ---- ID 为 123 的团队下 ID 未 456 的成员；
			
			
	作业
		多环境配置
		http & https 配置
		getCitiesByCountryId
		getCitiesBySearchVo
		getCountryByCountryId
		getCountryByCountryName
		
	作业回顾
		只提交 pom src下面的内容
				
============= day_03 ===========
Mybatis
	应用
		脚本多条件查询
		新增接口
		修改接口
		删除接口
		
Git 命令运用

Spring Data Jpa
	简介
		sun 公式定制的 ORM 的一套规范，自己并没有实现；
		hibernate、openJpa…… 其中 hibernate 性能最好，我们在项目中引入 jpa，实际引入 hibernate 相关的 jar
		Jpa：思想是少写 sql、或不写sql，基于这套理念，它封装了一套语法，使用 “注解” 的方式实现 “实体bean” 的关系（一对一、一对多、多对多），也正是因为这样，我们定义的 bean 会变变得复杂，对于比较复杂的业务逻辑来说，很容造成实体 bean 之间的循环调用；
	步骤一：pom导入相关
		<!-- jpa -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
	步骤二：配置
		application.properties
			# for jpa
			# validate\create\create-drop\update
			spring.jpa.hibernate.ddl-auto=update
			spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
			spring.jackson.serialization.fail-on-empty-beans=false
			spring.jpa.show-sql=true
			spring.jpa.properties.hibernate.format_sql=true
			logging.level.org.hibernate.SQL=DEBUG
			logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace
	步骤三：应用
		repository ---- service ---- controller
		创建实体 bean
		自动生成表
		jpa 父接口
		
	作业
		mybatis 脚本查询、增删改
		jpa 自动生成表、父接口运用
		思考题：
			jpa自动生成表，如何保证 bean 属性的顺序 和 生成的表的列顺序 一致
			
============= day_04 ===========
Jpa
	父接口应用
		分页带条件查询
			findall（）
			findall（sort）
			findall（pageable）
			findall（example， pageable） ---- 带条件分页查询，需要给定一个模版，按照模版封装的内容进行查询
		
	属性查询
		接口方法命名：find  + Top || First（option）+ By + 属性 + 关键字 + 属性（option）
			查询关键字列表
			And ---- findByLastnameAndFirstname ---- … where x.lastname = ?1 and x.firstname = ?2；
			Or ---- findByLastnameOrFirstname ---- … where x.lastname = ?1 or x.firstname = ?2；
			Is,Equals ---- findByFirstname,findByFirstnameIs,findByFirstnameEquals ---- … where x.firstname = ?1；
			Between ---- findByStartDateBetween ---- … where x.startDate between ?1 and ?2；
			LessThan ---- findByAgeLessThan ---- … where x.age < ?1；
			LessThanEqual ---- findByAgeLessThanEqual ---- … where x.age <= ?1；
			GreaterThan ---- findByAgeGreaterThan ---- … where x.age > ?1；
			GreaterThanEqual ---- findByAgeGreaterThanEqual ---- … where x.age >= ?1；
			After ---- findByStartDateAfter ---- … where x.startDate > ?1；
			Before ---- findByStartDateBefore ---- … where x.startDate < ?1；
			IsNull ---- findByAgeIsNull ---- … where x.age is null；
			IsNotNull,NotNull ---- findByAge(Is)NotNull ---- … where x.age not null；
			Like ---- findByFirstnameLike ---- … where x.firstname like ?1；
			NotLike ---- findByFirstnameNotLike ---- … where x.firstname not like ?1；
			StartingWith ---- findByFirstnameStartingWith ---- … where x.firstname like ?1 (parameter bound with appended %)；
			EndingWith ---- findByFirstnameEndingWith ---- … where x.firstname like ?1 (parameter bound with prepended %)；
			Containing ---- findByFirstnameContaining ---- … where x.firstname like ?1 (parameter bound wrapped in %)；
			OrderBy ---- findByAgeOrderByLastnameDesc ---- … where x.age = ?1 order by x.lastname desc；
			Not ---- findByLastnameNot ---- … where x.lastname <> ?1；
			In ---- findByAgeIn(Collection<Age> ages) ---- … where x.age in ?1；
			NotIn ---- findByAgeNotIn(Collection<Age> ages) ---- … where x.age not in ?1；
			True ---- findByActiveTrue() ---- … where x.active = true；
			False ---- findByActiveFalse() ---- … where x.active = false；
			IgnoreCase ---- findByFirstnameIgnoreCase ---- … where UPPER(x.firstame) = UPPER(?1)；
		自定义查询
			sql ---- select * from h_student where student_id = ?
			hql ---- select studentId, studentName from Student where studentId = ?
				使用 “类名” 代替 “表名”，使用 “类名.属性名” 代替 “列名”；
				没有 * 查询；
				传参方式
					1、?index 的方式，index 顺序和方法参数顺序一致，从 1 开始：
						@Query(value = "select s from Student s where s.studentName = ?1 and s.studentCard.cardId = ?2")
			JPql ---- 实际上 hql 类似；
			
		
	作业
		jpa 实现
			父接口查询
			属性查询
			自定义查询
			
============= day_05 ===========
持久层
	关系型数据库：mysql、sql server、orcal
	非关系型数据库：
		内存性数据库：redis
		文件形数据库：MongoDB
Redis
	redis 安装简介，参考笔记内容
	步骤一：pom引入jar
		<!-- redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!-- pool -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>
	步骤二：配置
		application.perperties
			# for Redis
			spring.redis.database=0
			spring.redis.host=127.0.0.1
			spring.redis.port=6379
			spring.redis.password=111111
			spring.redis.timeout=300

			# for Lettuce
			spring.redis.lettuce.pool.max-active=8
			spring.redis.lettuce.pool.max-wait=10000
			# 连接池中最大的空闲连接数
			spring.redis.lettuce.pool.max-idle=8
			# 连接池中最小连接数
			spring.redis.lettuce.pool.min-idle=0
			# 关闭超时时间
			spring.redis.lettuce.shutdown-timeout=100
		配置类 RedisConfig
			思路
				重写redis存储数据 key 、value 的序列化方式
				重写缓存管理
				重写缓存 key
	步骤三：应用
		封装一个工具类，RedisUtils
			封装各种数据类型的操作，包装了类似的代码 opsFore***
			数据操作进行异常捕获
		service 层 || dao 层进行 redis 数据操作，其余不变；
		
			
		
	
		
	
		
		
		
		
		
		