一、选择题（共12小题，每小题2.5分，共30分）
	以下不是spring boot优点的是 ( D )
		A．快速搭建项目
		B．简化配置  
		C．自动配置  
		D．无需容器
	Spring Boot配置，以下哪个优先级最高（ A）
		A、外置：xx.jar同目录下/config/application.properties；
		B、外置：xx.jar同目录下/config/application.yml；
		C、内置：src/main/resources/config；
		D、内置：src/main/resources
	以下log日志级别哪个最高（D）
		A、DEBUG
		B、INFO
		C、WARN
		D、ERROR
	以下不是spring boot的核心注解的是 ( A )
		A.	@SpringBootConfiguration
		B.	@EnableAutoConfiguration
		C.	@ComponentScan
		D.	@MapperScan
	要使用springMVC的功能，需要导入那个包 ( C )
		A．spring-boot-starter-jdbc  
		B．spring-boot-starter-thymeleaf  
		C．spring-boot-starter-web  
		D．mybatis-spring-boot-starter
	以下哪个注解不能加在类上 (  B)
		A.	@Controller
		B.	@ResponseBody
		C.	@RestController
		D.	@RequestMapping
	当控制层上有@RestController注解时，方法中返回一个字符串“<h1>Hello</h1>”，浏览器调用的结果是 ( A)
		A. 一级标题显示的Hello
		B.	找不到Hello.html
		C.	<h1>Hello</>
		D.	Hello
	SpringBoot项目中配置文件的格式 (C)
		A．properties  
		B．yml  
		C．两者都可以
	不是SpringBoot核心配置文件是（C）
		A.	bootstrap
		B.	application
		C.	application-dev
	前台使用json参数格式，控制器consumer、参数使用的注解是（A）
		A、application/josn ---- @RequestBody
		B、application/josn ---- @ModelAttribute
		C、application/x-www-form-urlencoded ---- @RequestBody
		D、application/x-www-form-urlencoded ---- @ModelAttribute
	@Pointcut("execution(public * com.thornBird.sbd.modules.*.controller.*.*(..))")，第三个*代表（C）
		A、代表返回类型不限
		B、代表module下所有子包
		C、代表所有类
		D、代表所有方法
	Url匹配风格中/admin*，以下哪个匹配不正确（D）
		A、/admin
		B、/admin1
		C、/admin123
		D、/admin/1
	Mybatis框架中，插入数据使用那个注解（B）
		A、@Update
		B、@Insert
		C、@Select
		D、@InsertMapping

二、填空题（共5小题，每小题5分，共25分）
	获取配置文件的属性值，使用哪个注解_________@Value_______；
	Java配置依赖的2个注解是___@Bean_______，___@Configuration________;
	Spring Boot修改tomcat端口号为9090应该怎么写？_____server.port=9090_______;
	自定义拦截器需要实现__HandlerInterceptor ______接口；
	过滤器需要使用__@WebFilter_______注解;
	上传文件，使用__MultipartFile [] files__接收文件对象，consumer使用___multipart/form-data__;

三、问答题（每题5分，共25分）
	阐述 Spring Boot 特性，举一个例子来解释 Staters 的内容；
	答：特性：快速开发，简化配置，注解开发，内嵌容器，无需外置容器，监控方便，pom
	      Staters：将我们所需要的东西直接封装好，不需要我们自己再动手操作。
	
	Mybatis传参中，#{*}、${*}的区别？
	答：#{*}是预编译，即相当于 ？，${*}是直接传参


	简述Restful规则？
	答：书写规则
		URI结尾不应包含（/）；
		正斜杠分隔符（/）必须用来指示层级关系；
		应使用连字符（ - ）来提高URI的可读性；
		不得在URI中使用下划线（_）；
		URI路径中全都使用小写字母；
	命名规则
		单资源 ---- URL中不要Get、Update等字样，通过请求类型控制
		GET /api/user；
		POST /api/user；
		单资源带id	
		复数资源：GET /api/users；
		

	简述Git使用流程，写几个常用Git命令？
	答：先创建本地仓库，然后将代码add到本地仓库中，然后commit，最后push到远程仓库
	查看远程仓库：$ git remote -v
	添加远程仓库：$ git remote add 
	删除远程仓库：$ git remote rm 
	拉取远程仓库：$ git pull 
	推送远程仓库：$ git push 

	简述shiro两大功能实现流程；
	答：身份验证过程
		用户登录 ---- 包装令牌（用户名、密码、记住我） ---- subject 调用 realm，包装身份验证器 ---- 身份验证器和令牌做比对（用户名和密码的比对）
	资源授权流程
		用户登录 ----- subject调用 checkroles（） ---- 跳转页面 ---- 当页面有 shiro 标签 或者方法上有 shiro 注解时候 ---- 调用 realm 里面的资源授权器 ---- 资源授权器和标签或注解上的内容做比对
		
四、编程题（每题10分，共20分）
	1、提供一个接口，返回 List<User> 列表，对该列表进行排序、保留10条数据；页面端使用 ajax post 方式提交请求，包装查询参数，获取接口返回数据，并遍历数据渲染到页面上 table 表格中；
	
	前端<div class="card-box table-responsive">
                                    <table id="datatable" class="table table-striped table-bordered" style="width:100%">
                                        <thead>
                                        <tr>
                                            <th>用户ID</th>
                                            <th>用户名</th>
                                            <th>密码</th>
                                            <th>创建时间</th>
                                            <th>操作</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                    </table>
                                </div>
<script type="text/javascript">
 var DEFAULT_PAGE_SIZE = 10;
    $(document).ready(function() {
        initUserTable(DEFAULT_PAGE_SIZE);
    });

    function initUserTable(pageSize) {
        $('#datatable').DataTable({
            'paging': true, //分页
            "serverSide": true, //开启后端分页
            "pagingType": "full_numbers", //分页样式的类型simple/simple_numbers/full/full_numbers
            "pageLength": pageSize, //定义初始的页长
            "processing": true,
            "destroy": true, //允许销毁替换，在表格重新查询时，可以自动销毁以前的data
            'lengthChange': true, //控制是否能够调整每页的条数
            'searching': true,
            'data-show-refresh': true,
            'ordering': true,
            'autoWidth': false,
            "ajax": function (data, callback, settings) {
                // 从data获取查询数据
                var columIndex = data.order[0].column;
                var sort = data.order[0].dir;
                var orderBy = data.columns[columIndex].name;
                pageSize = data.length == undefined  ? pageSize : data.length;

                var searchVo = {};
                searchVo.currentPage = (data.start / pageSize) + 1;
                searchVo.pageSize = pageSize;
                searchVo.orderBy = orderBy;
                searchVo.sort = sort;
                searchVo.keyWord = data.search.value;

                $.ajax({
                    url : "/users",
                    type : "post",
                    contentType: "application/json",
                    data : JSON.stringify(searchVo),
                    success : function (rs) {
                        var fData = {
                            draw :0,
                            recordsTotal: 0,
                            recordsFiltered: 0,
                            data: []
                        };
                        if (!rs) {
                            layer.alert("请求出错，请稍后重试" + rs.errmsg, {icon: 2});
                            callback(fData);
                            return;
                        };
                        if (rs.list == null) {
                            $('#datatable tbody tr').remove();
                            $('#loading').remove();
                            callback(fData);
                            return;
                        }
                        $('#loading').remove();
                        var gearDatas = [];
                        for (var i = 0; i < rs.list.length; i++) {
                            //包装行数据
                            var rowData = new TData(rs.list[i].userId, rs.list[i].userName,
                                rs.list[i].password, rs.list[i].createDate);
                            // 将行数据放到数组里
                            gearDatas.push(rowData);
                        }
                        fData.data = gearDatas;
                        fData.recordsTotal = rs.total;
                        fData.recordsFiltered = rs.total;
                        callback(fData);
                    },
                    error : function (data) {
                        layer.alert(data.responseText, {icon: 0});
                    }
                });
            },
            "columns": [ //定义行数据字段
                {data: 'userId', name: "user_id", sortable: true},
                {data: 'userName', name: "user_name", sortable: true},
                {data: 'password', name: "password", sortable: true},
                {data: 'createDate', name: "create_date", sortable: true},
                {data: 'operate', width: '80px', sortable: false}
            ]
        });
    }
    //行数据结构
    function TData(userId, userName, password, createDate) {
        this.userId = userId;
        this.userName = userName;
        this.password = password;
        this.createDate = createDate;
        this.operate = function () {
            return "<a href='#' class='btn_editcolor' data-toggle='modal' data-target='#userEditModal' " +
                "onclick='initEditModal(\"" + userId + "\")'>编辑</a>&nbsp;" +
                "<a href='javascript:void(0);' onclick='deleteUser(\"" + userId + "\")' class='btn_editcolor'>删除</a>";
        }
    }
</script>	

dao层：
 @Select("<script>" +
            "select * from user "
            + "<where> "
            + "<if test='keyWord != \"\" and keyWord != null'>"
            + " and (user_name like '%${keyWord}%') "
            + "</if>"
            + "</where>"
            + "<choose>"
            + "<when test='orderBy != \"\" and orderBy != null'>"
            + " order by ${orderBy} ${sort}"
            + "</when>"
            + "<otherwise>"
            + " order by user_id desc"
            + "</otherwise>"
            + "</choose>"
            + "</script>")
    List<User> getUsersBySearchVo(SearchVo searchVo);

service层：
    PageInfo<User> getUsersBySearchVo(SearchVo searchVo);
实现层：
    @Override
    public PageInfo<User> getUsersBySearchVo(SearchVo searchVo) {
        searchVo.initSearchVo();
        PageHelper.startPage(searchVo.getCurrentPage(), searchVo.getPageSize());
        return new PageInfo<User>(
                Optional.ofNullable(userDao.getUsersBySearchVo(searchVo))
                        .orElse(Collections.emptyList()));
    }

controller层
    @PostMapping(value = "/users", consumes = MediaType.APPLICATION_JSON_VALUE)
    public PageInfo<User> getUsersBySearchVo(@RequestBody SearchVo searchVo) {
        return userService.getUsersBySearchVo(searchVo);
    }
	
vo
public class SearchVo {
	public final static int DEFAULT_CURRENT_PAGE = 1;
	public final static int DEFAULT_PAGE_SIZE = 10;
	private int currentPage;
	private int pageSize;
	private String keyWord;
	private String orderBy;
	private String sort;
	public void initSearchVo() {
		if (this != null) {
			this.setCurrentPage(this.getCurrentPage() == 0 ? DEFAULT_CURRENT_PAGE : this.getCurrentPage());
			this.setPageSize(this.getPageSize() == 0 ? DEFAULT_PAGE_SIZE : this.getPageSize());
		}
	}
	public int getCurrentPage() {
		return currentPage;
	}
	public void setCurrentPage(int currentPage) {
		this.currentPage = currentPage;
	}
	public int getPageSize() {
		return pageSize;
	}

	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}
	public String getKeyWord() {
		return keyWord;
	}
	public void setKeyWord(String keyWord) {
		this.keyWord = keyWord;
	}
	public String getOrderBy() {
		return orderBy;
	}

	public void setOrderBy(String orderBy) {
		this.orderBy = orderBy;
	}
	public String getSort() {
		return sort;
	}
	public void setSort(String sort) {
		this.sort = sort;
	}
}	


	2、设计一套购物车接口，以 Cookie 或者 redis 实现


